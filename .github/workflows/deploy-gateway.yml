name: Deploy Gateway Service
on:
  workflow_dispatch:

jobs:
  deploy-gateway:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-central-1
      ECR_REPOSITORY: gateway
      ECS_CLUSTER: my-cluster
      ECS_SERVICE: gateway-service
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker build -f gateway/Dockerfile -t $IMAGE_URI gateway/
          docker push $IMAGE_URI

      - name: Render new task definition
        id: render-gateway
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: gateway-task-def.json
          container-name: gateway
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          task-definition: ${{ steps.render-gateway.outputs.task-definition }}
